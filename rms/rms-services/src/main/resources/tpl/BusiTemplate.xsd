<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema elementFormDefault="unqualified"
	attributeFormDefault="unqualified" targetNamespace="http://www.iot.cn/BusiTemplate"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:busi="http://www.iot.cn/BusiTemplate">

	<!-- root -->
	<xsd:element name="Template" type="busi:BusiTemplate"></xsd:element>

	<!-- 操作模版 整个大的流程 -->
	<xsd:complexType name="BusiTemplate">
		<xsd:all>
			<xsd:element name="OperationFlow" type="busi:OperationFlowType"
				minOccurs="0" maxOccurs="1">
			</xsd:element>
		</xsd:all>
	</xsd:complexType>
	
	<!-- 大的流程包含一个或者多个子流程 -->
	<xsd:complexType name="OperationFlowType">
		<xsd:sequence>
			<xsd:element name="FlowBean" type="busi:FlowBeanType"
				maxOccurs="unbounded" minOccurs="0"></xsd:element>
		</xsd:sequence>
		<!--这个属性表示在整个大流程开始和结束时要做的操作，这个地方用来设置InternetGatewayDevice.X_CMCC_UserInfo.Result的值-->
		<xsd:attribute name="operationReturn" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- 子流程的操作操作步骤 ，它同时包含ADD/SET 等具体的步骤 ... -->
	<xsd:complexType name="FlowBeanType">
		<xsd:sequence>
			<xsd:element name="FlowBeanSearch" type="busi:FlowBeanSearchType"
						 maxOccurs="unbounded" minOccurs="0"></xsd:element>
			<xsd:element name="FlowBeanAdd" type="busi:FlowBeanAddType"
				maxOccurs="unbounded" minOccurs="0"></xsd:element>
			<xsd:element name="FlowBeanSet" type="busi:FlowBeanSetType"
				maxOccurs="unbounded" minOccurs="0"></xsd:element>
		</xsd:sequence>
		<!--FlowBean的唯一标识-->
		<xsd:attribute name="id" type="xsd:string"></xsd:attribute>
		<!--ref表示本流程依赖于某个流程的执行结果-->
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
		<!--refSearch表示本流程依赖于某个查询流程的查询结果，当refSearch和ref同时存在时，会先去取refSearch的结果，如果refSearch的结果不为空，则忽略ref的结果，如果refSearch的结果为空，则去取ref的结果-->
		<xsd:attribute name="refSearch" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- 增加类型的操作步骤 -->
	<xsd:complexType name="FlowBeanSearchType">
		<!--表示属性按顺序出现-->
		<xsd:sequence>
			<!--表示执行查询指令时，传输的参数，默认查询起所有子节点-->
			<xsd:element name="Command" >
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:minLength value="1"></xsd:minLength>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<!--查询结果的匹配定义，支持多个-->
			<xsd:element name="FlowBeanMatch" type="busi:FlowBeanMatchType"
						 maxOccurs="unbounded" minOccurs="0">
			</xsd:element>
			<!-- 需要截取的路径所在的MatchBean的id-->
			<xsd:element name="SplitPath" >
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:minLength value="1"></xsd:minLength>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<!--匹配上的节点进行截取的字符串，查询结果取截取字符串的前半部分，如果不配置该节点，则查询结果直接取匹配上的节点全路径-->
			<xsd:element name="SplitStr" >
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:minLength value="1"></xsd:minLength>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="id" type="xsd:string">
		</xsd:attribute>
	</xsd:complexType>
	<!--匹配类型-->
	<xsd:complexType name="FlowBeanMatchType">
		<xsd:sequence>
			<!--需要匹配的节点的正则表达式-->
			<xsd:element name="Pattern" >
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:minLength value="1"></xsd:minLength>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<!--需要匹配的值-->
			<xsd:element name="MatchValue" >
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:minLength value="1"></xsd:minLength>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<!--当有多个FlowBeanMatch时，用来获取公共路径的截取字符串-->
			<xsd:element name="leaf" >
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:minLength value="1"></xsd:minLength>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="id" type="xsd:string">
		</xsd:attribute>
	</xsd:complexType>
	<!-- 增加类型的操作步骤 -->
	<xsd:complexType name="FlowBeanAddType">
		<xsd:sequence>
			<!--表示执行添加指令时，传输的参数-->
			<xsd:element name="Command" >
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:minLength value="1"></xsd:minLength>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<!--获取参数的键-->
			<xsd:element name="ParamKey" minOccurs="0">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:minLength value="1"></xsd:minLength>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<!--取默认值-->
			<xsd:element name="Default" minOccurs="0">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:minLength value="1"></xsd:minLength>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="id" type="xsd:string">
		</xsd:attribute>
		<!--ref表示本流程依赖于某个流程的执行结果-->
		<xsd:attribute name="ref" type="xsd:string">
		</xsd:attribute>
		<!--在添加之前是否先查询，0表示是，1表示否。如果查询到有相应的节点，则不再添加，直接返回查询到的某一个节点-->
		<xsd:attribute name="searchFirst" type="xsd:string"	default="1"></xsd:attribute>
		<!--缓存中查找是否已有,暂时没用-->
		<xsd:attribute name="cached" type="xsd:string"></xsd:attribute>
		<!--refSearch表示本流程依赖于某个查询流程的查询结果，当refSearch和ref同时存在时，会先去取refSearch的结果，如果refSearch的结果不为空，则忽略ref的结果，如果refSearch的结果为空，则去取ref的结果-->
		<xsd:attribute name="refSearch" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- 设置参数 包含有多个参数的设置 -->
	<xsd:complexType name="FlowBeanSetType">
		<xsd:sequence>
			<xsd:element name="SetParam" type="busi:SetParamType"
				maxOccurs="unbounded" minOccurs="1"></xsd:element>
		</xsd:sequence>
		<!--缓存中查找是否已有,暂时没用-->
		<xsd:attribute name="ref" type="xsd:string">
		</xsd:attribute>
		<!--refSearch表示本流程依赖于某个查询流程的查询结果，当refSearch和ref同时存在时，会先去取refSearch的结果，如果refSearch的结果不为空，则忽略ref的结果，如果refSearch的结果为空，则去取ref的结果-->
		<xsd:attribute name="refSearch" type="xsd:string"></xsd:attribute>
		<!--是否需要执行设置操作，isNeedExcute,根据某个FLOW的ID查询FLOW的执行结果，如果执行结果不为空，则不需要执行-->
		<xsd:attribute name="isNeedExcute" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="SetParamType">
		<xsd:sequence>
			<xsd:element name="Command" nillable="true">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:minLength value="1"></xsd:minLength>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<xsd:element name="ParamKey" minOccurs="0">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:minLength value="1"></xsd:minLength>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<xsd:element name="DefaultKey" minOccurs="0">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:minLength value="1"></xsd:minLength>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<xsd:element name="Default" minOccurs="0">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:minLength value="1"></xsd:minLength>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<!--stitch表示字符串拼接，表示在ParamKey值后面拼接上stitch的值,stitch和split同时出现时，先执行stitch-->
			<xsd:element name="stitch" minOccurs="0">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:minLength value="1"></xsd:minLength>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<!--split表示拆分，根据split的值对ParamKey值进行拆分-->
			<xsd:element name="split" minOccurs="0">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:minLength value="1"></xsd:minLength>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<!--beforeOrAfter表示Command取split的前面(before)的串还是后面(after)的串,和split要成对出现，如果没有beforeOrAfter,默认为before。-->
			<xsd:element name="beforeOrAfter" minOccurs="0">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:minLength value="1"></xsd:minLength>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<!--参数类型-->
			<xsd:element name="valueType" minOccurs="0">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:minLength value="1"></xsd:minLength>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

</xsd:schema>